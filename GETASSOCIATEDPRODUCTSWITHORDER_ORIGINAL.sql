ALTER PROCEDURE [dbo].[GETASSOCIATEDPRODUCTSWITHORDER]
    @USERNAME NVARCHAR(30) ,
    @ORDERNAME VARCHAR(50) ,
    @ORDERTYPE VARCHAR(30) ,
    @ASSOCTYPEID INT = 0 ,
    @ASSOCTYPE VARCHAR(30) = '' ,
    @SERIALNUMBER VARCHAR(30) = '' ,
    @LANGUAGECODE CHAR(2) = 'EN' ,
    @SESSIONID VARCHAR(50) = NULL ,
    @PRODUCTLIST VARCHAR(100) = NULL ,
    @OEMCODE CHAR(4) = 'SNWL' ,
    @APPNAME VARCHAR(50) = 'MSW' ,
    @OutformatXML INT = NULL ,
    @CallFrom VARCHAR(50) = NULL ,
    @IsMobile VARCHAR(50) = 'NO',
    @SOURCE VARCHAR(10) ='' ,
    @SEARCHSERIALNUMBER VARCHAR(30) ='',
    @ISPRODUCTGROUPTABLENEEDED VARCHAR(10) ='YES' -- this parameter from SPUPDATEFIRMWARESERIALNUMBER. to get only serial number detatils
--WITH EXECUTE AS CALLER
--Whenever changes added in this sp we have to add changes of this SPUPDATEFIRMWARESERIALNUMBER too. (changes in getting serial number details)
AS
BEGIN
SET NOCOUNT ON
IF ISNULL(@LANGUAGECODE, '') = ''
SELECT @LANGUAGECODE = 'EN'

IF ISNULL(@OEMCODE, '') = ''
SELECT @OEMCODE = 'SNWL'

IF ISNULL(@APPNAME, '') = ''
SELECT @APPNAME = 'MSW'

IF ISNULL(@IsMobile, '') = ''
SELECT @IsMobile = 'NO'

DECLARE @CONTACTID BIGINT
DECLARE @ORGID BIGINT
DECLARE @ROLLUP BIT
DECLARE @ISSELECTEDPARTNER BIT=0
DECLARE @INDEX INT
DECLARE @TotalCNT INT
DECLARE @TEMPSERIALNUMBER VARCHAR(30)
DECLARE @DISPLAYKEYSET VARCHAR(3)
DECLARE @ASSOWITHTXT NVARCHAR(100)
DECLARE @BISCLOSEDNETWORK INT
DECLARE @ISLARGEUSER VARCHAR(3) = 'NO'
DECLARE @RECENTCOUNT INT=50
DECLARE @APPLICATIONFUNCTIONALITY VARCHAR(50) = 'ACCESSTYPEPRODMGMT'
SELECT @BISCLOSEDNETWORK = 0
DECLARE @ISMSSPUSER VARCHAR(10)
DECLARE @EMAILADDRESS VARCHAR(30)
DECLARE @DESCRIPTION VARCHAR(255)
DECLARE @APPLICATIONNAME VARCHAR(50)
DECLARE @MOBILESERVERPRODUCTLISTORGANIZATIONID VARCHAR(100)
DECLARE @ENABLEORGBASEDASSET VARCHAR(20) = 'NO'
DECLARE @ISORGBASEDACCOUNT VARCHAR(3) = 'NO'
DECLARE @PARTYID INT
DECLARE @ORGBASEDASSETOWNSERSHIPENABLED VARCHAR(3) = 'NO', @ROLEIDORGBASED INT

DECLARE @IT INT =0
DECLARE @CNT INT
DECLARE @ISER VARCHAR(40)
DECLARE @ICONNECTORNAME VARCHAR(100)
DECLARE @CONNECTORNAME NVARCHAR(255)
SELECT @APPLICATIONNAME = APPLICATIONNAME FROM SESSIONREV WITH (NOLOCK) WHERE USERNAME = @USERNAME

SELECT @CONTACTID = CONTACTID , @ORGID = ORGANIZATIONID ,@ISLARGEUSER = ISNULL(LARGECUSTOMER,'NO'), @ISORGBASEDACCOUNT = ORGBASEDACCOUNT, @PARTYID = PARTYID
FROM dbo.VCUSTOMER WITH ( NOLOCK )
WHERE USERNAME = @USERNAME

SELECT @ENABLEORGBASEDASSET = APPLICATIONCONFIGVALUE FROM APPLICATIONCONFIGVALUE (NOLOCK)
WHERE APPLICATIONCONFIGNAME='ENABLEORGBASEDASSET'

SELECT @ROLEIDORGBASED = APPLICATIONROLEID FROM APPLICATIONROLE WITH (NOLOCK) WHERE ROLENAME = 'ORGBASED' AND APPLICATIONNAME = 'MSW' AND OEMCODE = 'SNWL'

SELECT @ORGBASEDASSETOWNSERSHIPENABLED = CASE
WHEN ISNULL(@ENABLEORGBASEDASSET,'') = 'YES' THEN 'YES'
WHEN ISNULL(@ENABLEORGBASEDASSET,'') = 'ROLEBASED' AND @ISORGBASEDACCOUNT = 'YES' THEN 'YES'
--WHEN ISNULL(@ENABLEORGBASEDASSET,'') = 'ROLEBASED' AND EXISTS (SELECT 1 FROM APPLICATIONPARTYROLE WITH(NOLOCK) WHERE PARTYID = @PARTYID
--AND APPLICATIONROLEID = @ROLEIDORGBASED) THEN 'YES'
ELSE 'NO'
END

SELECT @ISMSSPUSER = DBO.FNISMSSPUSER(@USERNAME)

SELECT @MOBILESERVERPRODUCTLISTORGANIZATIONID = APPLICATIONCONFIGVALUE FROM APPLICATIONCONFIGVALUE
WITH (NOLOCK) WHERE APPLICATIONCONFIGNAME='MOBILESERVERPRODUCTLISTORGANIZATIONIDS'

SELECT @RECENTCOUNT=CAST(APPLICATIONCONFIGVALUE AS int)
FROM APPLICATIONCONFIGVALUE WITH (NOLOCK) WHERE APPLICATIONCONFIGNAME='MOBILESERVERPRODUCTLISTCOUNT'

IF EXISTS( SELECT USERNAME FROM vcustomer WHERE ORGANIZATIONID IN
(SELECT * FROM FNSPLITCSV(@MOBILESERVERPRODUCTLISTORGANIZATIONID) ) AND USERNAME = @USERNAME)
BEGIN
SELECT @ISSELECTEDPARTNER=1
END

SELECT @ROLLUP = OWNSPRODUCT from ORGANIZATION O (nolock) where O.ORGANIZATIONID =@ORGID

EXECUTE SP_GETMESSAGESTRING 'ASSOWITH', @LANGUAGECODE, 1,
@ASSOWITHTXT OUTPUT

CREATE TABLE #TEMPLISTTABLE
(
CID INT IDENTITY(1, 1) ,
PRODUCTID INT ,
SERIALNUMBER VARCHAR(30) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS ,
REGISTRATIONCODE VARCHAR(50) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS ,
FIRMWAREVERSION VARCHAR(100) COLLATE SQL_LATIN1_GENERAL_CP1_CI_AS ,
OWNEROFTHEPRODUCT INT NOT NULL DEFAULT 0 ,
PRODUCTOWNER NVARCHAR(30) ,
ISSUENAME NVARCHAR(255) ,
RESOLUTIONNAME NVARCHAR(255) ,
PRODUCTGROUPID INT ,
PRODUCTGROUPNAME NVARCHAR(510) ,
SUPPORTDATE DATETIME ,
NEEDEDFIRMWAREVERSION VARCHAR(100) ,
FIRMWARESTATUS VARCHAR(30) ,
FIRMWARETEXT VARCHAR(1000) ,
SRLNOSTATUS VARCHAR(100) ,
RELEASENOTES VARCHAR(2000),
PARTYGROUPIDS VARCHAR(MAX),
PARTYGROUPNAMES nvarchar(MAX),
PARTYGROUPNAME NVARCHAR(MAX),
DEVICESTATUS VARCHAR(10),
PRODUCTGROUPNAMES nvarchar(MAX),
PRODUCTGROUPIDS VARCHAR(MAX),
FWTAB VARCHAR(5),
ASSOCTYPEINTNAME VARCHAR(255),
ISDELETEALLOWED CHAR(3),
ISTRANSFERALLOWED CHAR(3),
ISRENAMEALLOWED CHAR(3),
ISSECUREUPGRADE CHAR(3),
S1SVCSTATUS VARCHAR(30),
SENTINELONEEXPIRYDATE DATETIME,
LICENSEEXPIRYCNT INT DEFAULT 0,
SOONEXPIRINGCNT INT,
ACTIVELICENSECNT INT,
ISLICENSEEXPIRED INT DEFAULT 0,
ISSOONEXPIRING INT DEFAULT 0,
MINLICENSEEXPIRYDATE DATETIME,
SOONEXPIRYDATE DATETIME,
ISDOWNLOADAVAILABLE INT DEFAULT 0,
HESNODECOUNT INT DEFAULT 0,
CASNODECOUNT INT DEFAULT 0,
CCNODECOUNT INT DEFAULT 0,
GMSNODECOUNT INT DEFAULT 0,
EPAID VARCHAR(100),
ISZTSUPPORTED INT,
SUPPORTEXPIRYDATE DATETIME,
NONSUPPORTEXPIRYDATE DATETIME,
SERVICELINE VARCHAR(50),
ISBILLABLE VARCHAR(10),
ROLETYPE VARCHAR(100),
SASELICENSECOUNT INT DEFAULT 0,
ISZEROTOUCHALLOWED CHAR(3),
ORGNAME NVARCHAR(250) ,
PRODUCTFAMILY VARCHAR(50),
PRODUCTLINE VARCHAR(100),
ACTIVEPROMOTION INT DEFAULT 0 ,
DISPLAYKEYSET VARCHAR(3) ,
ASSOCIATIONTYPE VARCHAR(510),
ISADDKEYSETAPPLICABLE VARCHAR(10),
CURRENTNODESUPPORT INT,
MSSPMONTHLYOPTION VARCHAR(20),
ISNETWORKPRODUCT VARCHAR(10),
EMAILADDRESS VARCHAR(100),
[DESCRIPTION] VARCHAR(255),
LASTPINGDATE DATETIME,
PSAADDITIONSEXPIRYDATE DATETIME,
ISSHAREDTENANT VARCHAR(3),
CONNECTORNAME VARCHAR(100),
PRODUCTCHOICEID INT,
MANAGEMENTOPTION VARCHAR(100),
ORGID INT
--,REGCODE VARCHAR(30)
)

CREATE CLUSTERED INDEX IDX_TEMPLISTTABLE_SERIALNUMBER ON #TEMPLISTTABLE(SERIALNUMBER)

DECLARE @PRODGROUPTABLE TABLE
(
PRODUCTGROUPID INT,
PRODUCTGROUPNAME NVARCHAR(4000),
TOTALPRODUCTSCNT INT,
EXPIREDPRODUCTSCNT INT,
SOONEXPIRINGPRODDUCTSCNT INT,
ACTIVEPRODUCTSCNT INT,
ACCESSPOINTCNT INT,
FIREWALLCNT INT
)

DECLARE @GROUPTABLE TABLE
(
GROUPID INT,
GROUPNAME NVARCHAR(4000),
GROUPTYPE VARCHAR(20)
)

SELECT PG.PARTYGROUPID ,
PG.PARTYGROUPNAME,
P.CONTACTID,
PTG.PRODUCTGROUPID,
PTG.PRODUCTGROUPNAME,
SERIALNUMBER,
P.ORGANIZATIONID,
PTG.ADMINPARTYID into #tempPRGD
from
PARTYGROUP PG (nolock)
, PARTYGROUPDETAIL PGD (nolock)
, PARTYPRODUCTGROUP PPG (nolock)
, PRODUCTGROUP PTG (nolock)
, PRODUCTGROUPDETAIL PTGD (nolock)
, PARTY P (nolock)
where PG.PARTYGROUPID = PGD.PARTYGROUPID
and PPG.PARTYGROUPID = PG.PARTYGROUPID
and PPG.PRODUCTGROUPID = PTG.PRODUCTGROUPID
and PTG.PRODUCTGROUPID = PTGD.PRODUCTGROUPID
AND P.PARTYID = PGD.PARTYID
--AND PTG.ADMINPARTYID IN (SELECT PARTYID FROM PARTY WITH (NOLOCK)
--WHERE STATUS = 'ACTIVE' AND ORGANIZATIONID IN (SELECT ORGANIZATIONID FROM PARTY WITH (NOLOCK)
--WHERE CONTACTID = @CONTACTID))
and contactid=@CONTACTID

IF @ASSOCTYPE ='CHILDASSOCIATE' AND 
@ASSOCTYPEID IN ( SELECT PRODUCTASSOCIATIONTYPEID FROM PRODUCTASSOCIATIONTYPE WITH (NOLOCK) WHERE INTERNALDESCRIPTION='FIREWALL_CONNECTOR')
BEGIN
IF NOT EXISTS (SELECT PRODUCTID FROM CUSTOMERPRODUCTS WITH (NOLOCK) WHERE SERIALNUMBER=@SERIALNUMBER AND PRODUCTID=409)
BEGIN
SET @ASSOCTYPE ='PARENTASSOCIATE'
SELECT @CONNECTORNAME =CONNECTORNAME FROM DEVICEASSOCIATION WITH (NOLOCK) WHERE CHILDSERIALNUMBER=@SERIALNUMBER AND PRODUCTASSOCIATIONTYPEID=@ASSOCTYPEID
END
END

IF ISNULL(@ASSOCTYPEID, 0) = 0
BEGIN
IF ISNULL(@SEARCHSERIALNUMBER,'') = ''
BEGIN

IF ((ISNULL(@APPLICATIONNAME,'') = 'MSWANDROID' OR ISNULL(@APPLICATIONNAME,'') = 'MSWIOS') AND @ISSELECTEDPARTNER=1)
BEGIN

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY,
PRODUCTLINE,
ACTIVEPROMOTION

)
SELECT TOP (@RECENTCOUNT)
CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION

FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT TOP (SELECT CAST(APPLICATIONCONFIGVALUE AS int)
FROM APPLICATIONCONFIGVALUE WITH (NOLOCK) WHERE APPLICATIONCONFIGNAME='MOBILESERVERPRODUCTLISTCOUNT')
CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.USERNAME = @USERNAME and CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )

END
ELSE
BEGIN

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY,
PRODUCTLINE,
ACTIVEPROMOTION

)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION

FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.USERNAME = @USERNAME and CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )

END
--INCLUDE CLIENTLICESES
IF @SOURCE='RESTAPI'
BEGIN

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.USERNAME = @USERNAME
--and CP.SERIALNUMBER IN (
-- SELECT SERIALNUMBER
-- FROM #tempPRGD)
and CP.PRODUCTFAMILY IN ( 'CLIENTLICENSE' )
AND CP.SERIALNUMBER NOT IN (SELECT SERIALNUMBER FROM #TEMPLISTTABLE)
AND CP.USEDSTATUS = 1

-- get shared client licenses product as well
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY IN ( 'CLIENTLICENSE')
AND CP.SERIALNUMBER NOT IN (SELECT SERIALNUMBER FROM #TEMPLISTTABLE)
AND CP.USEDSTATUS = 1
END

END
ELSE
BEGIN
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY,
PRODUCTLINE,
ACTIVEPROMOTION

)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.USERNAME = @USERNAME and CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)

--INCLUDE CLIENTLICESES
IF @SOURCE='RESTAPI'
BEGIN

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.USERNAME = @USERNAME
--and CP.SERIALNUMBER IN (
-- SELECT SERIALNUMBER
-- FROM #tempPRGD)
and CP.PRODUCTFAMILY IN ( 'CLIENTLICENSE' )
AND CP.SERIALNUMBER NOT IN (SELECT SERIALNUMBER FROM #TEMPLISTTABLE)
AND CP.USEDSTATUS = 1
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)

-- get shared client licenses product as well
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY 'PRODUCTFAMILY',
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY IN ( 'CLIENTLICENSE')
AND CP.SERIALNUMBER NOT IN (SELECT SERIALNUMBER FROM #TEMPLISTTABLE)
AND CP.USEDSTATUS = 1
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)
END

END
END

IF ISNULL(@ASSOCTYPEID, 0) = 70
BEGIN
IF ISNULL(@SEARCHSERIALNUMBER,'') = ''
BEGIN

IF ((ISNULL(@APPLICATIONNAME,'') = 'MSWANDROID' OR ISNULL(@APPLICATIONNAME,'') = 'MSWIOS') AND @ISSELECTEDPARTNER=1)
BEGIN
PRINT '1234 '
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT TOP (@RECENTCOUNT)
CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT TOP (SELECT CAST(APPLICATIONCONFIGVALUE AS int)
FROM APPLICATIONCONFIGVALUE WITH (NOLOCK) WHERE APPLICATIONCONFIGNAME='MOBILESERVERPRODUCTLISTCOUNT')
CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
END
ELSE
BEGIN
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
END

END
ELSE
BEGIN
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.USEDSTATUS = 1
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE','FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','NSspTenant','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID IN ( 5, 6, 70 )--@ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)
END

END
ELSE
IF ISNULL(@ASSOCTYPEID, 0) <> 0
AND ISNULL(@ASSOCTYPEID, 0) <> 70
BEGIN
IF ISNULL(@SEARCHSERIALNUMBER,'') = ''
BEGIN

IF ((ISNULL(@APPLICATIONNAME,'') = 'MSWANDROID' OR ISNULL(@APPLICATIONNAME,'') = 'MSWIOS') AND @ISSELECTEDPARTNER=1)
begin
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT TOP (@RECENTCOUNT)
CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE',
'FLEXSPEND' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT TOP (SELECT CAST(APPLICATIONCONFIGVALUE AS int)
FROM APPLICATIONCONFIGVALUE WITH (NOLOCK) WHERE APPLICATIONCONFIGNAME='MOBILESERVERPRODUCTLISTCOUNT')
CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE', 'FLEXSPEND' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
END
ELSE
BEGIN
print 'eeee'
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE',
'FLEXSPEND' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE', 'FLEXSPEND' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
END
END
ELSE
BEGIN
INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE',
'FLEXSPEND' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)

INSERT INTO #TEMPLISTTABLE
( PRODUCTID ,
SERIALNUMBER ,
PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
)
SELECT CP.PRODUCTID ,
CP.SERIALNUMBER ,
CP.PRODUCTFAMILY ,
PRODUCTLINE,
ACTIVEPROMOTION
FROM
CUSTOMERPRODUCTSSUMMARY CP WITH ( NOLOCK )
WHERE CP.SERIALNUMBER NOT IN (
SELECT SERIALNUMBER
FROM #tempPRGD)
AND CP.PRODUCTFAMILY NOT IN ( 'CLIENTLICENSE', 'FLEXSPEND' )
AND CP.PRODUCTLINE NOT IN ('STORAGE MODULE','SATA MODULE','M2 STORAGE MODULE' )
AND CP.USEDSTATUS = 1
AND CP.SERIALNUMBER IN (
SELECT CHILDSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND PRIMARYSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE = 'CHILDASSOCIATE'
UNION
SELECT PRIMARYSERIALNUMBER
FROM dbo.DEVICEASSOCIATION WITH ( NOLOCK )
WHERE PRODUCTASSOCIATIONTYPEID = @ASSOCTYPEID
AND CHILDSERIALNUMBER = @SERIALNUMBER
AND @ASSOCTYPE <> 'CHILDASSOCIATE'
)
AND (CP.SERIALNUMBER = @SEARCHSERIALNUMBER OR CP.NAME = @SEARCHSERIALNUMBER)
END

END

IF @APPNAME IN ( 'SNB' )
BEGIN

--DECLARE @TMPGETSERIAL TABLE
--      (
--          ID INT IDENTITY(1, 1) ,
--          SERIALNUMBER VARCHAR(30),
-- EPAID VARCHAR(30)
--)

--INSERT INTO @TMPGETSERIAL
-- SELECT SERIALNUMBER,EPAID FROM DEAREGISTRATION NOLOCK WHERE SERIALNUMBER IN (SELECT SERIALNUMBER FROM #TEMPLISTTABLE)

--select * from dearegistration nolock where serialnumber in (select SERIALNUMBER from

UPDATE #TEMPLISTTABLE
SET EPAID = DEA.EPAID
FROM DEAREGISTRATION DEA WITH (NOLOCK) ,
#TEMPLISTTABLE TMP
WHERE DEA.SERIALNUMBER = TMP.SERIALNUMBER

END

update #TEMPLISTTABLE SET
CURRENTNODESUPPORT = CASE WHEN T.PRODUCTID = 7636
THEN (SELECT ISNULL(NODECOUNT,1)
FROM dbo.SERVICESSUMMARY WITH ( NOLOCK )
WHERE SERIALNUMBER = F.SERIALNUMBER
AND SERVICEFAMILY = 'NETWORKSECURITYMANAGER' )
WHEN T.PRODUCTID != 300 THEN F.CURRENTNODESUPPORT END
from #TEMPLISTTABLE t
inner join FIREWALLINSTANCES F with (nolock)
on t.SERIALNUMBER=F.serialnumber

update #TEMPLISTTABLE SET CCNODECOUNT=CP.CCNODECOUNT,
CASNODECOUNT=CP.CASNODECOUNT,
HESNODECOUNT= CASE WHEN T.PRODUCTID = 300 THEN CP.HESNODECOUNT
WHEN T.PRODUCTID = 401 THEN 0
WHEN T.PRODUCTID = 408 THEN 0
WHEN T.PRODUCTID = 7636 THEN (CASE WHEN CURRENTNODESUPPORT = 0 THEN 1 ELSE CURRENTNODESUPPORT END)
ELSE (CASE WHEN CURRENTNODESUPPORT = -1 THEN '5555' ELSE CURRENTNODESUPPORT END)
END,
GMSNODECOUNT=CP.GMSNODECOUNT,
SASELICENSECOUNT=CP.SASELICENSECOUNT,
PRODUCTGROUPID=CP.PRODUCTGROUPID,
PRODUCTGROUPNAME=CP.PRODUCTGROUPNAME,
SUPPORTDATE=CP.SUPPORTDATE,
SOONEXPIRYDATE=CP.SOONEXPIRYDATE,
MINLICENSEEXPIRYDATE=CP.MINLICENSEEXPIRYDATE,
ASSOCIATIONTYPE=CP.ASSOCIATIONTYPE,
LICENSEEXPIRYCNT=CP.LICENSEEXPIRYCNT,
SOONEXPIRINGCNT=CP.SOONEXPIRINGCNT,
ACTIVELICENSECNT =CP.ACTIVELICENSECNT,
ISNETWORKPRODUCT=CP.ISNETWORKPRODUCT,
--LASTPINGDATE= CASE WHEN @APPNAME='SNB' THEN CP.LASTPINGDATE END
LASTPINGDATE=CP.LASTPINGDATE
from #TEMPLISTTABLE t
inner join CUSTOMERPRODUCTSSUMMARY cp with (nolock)
on t.SERIALNUMBER=CP.serialnumber

IF EXISTS (SELECT T.SERIALNUMBER FROM #TEMPLISTTABLE T
INNER JOIN CUSTOMERPRODUCTSSUMMARYACTIVITY CP WITH (NOLOCK) ON T.SERIALNUMBER=CP.SERIALNUMBER
AND STATUS=0 AND ACTION='ALL')
BEGIN

UPDATE #TEMPLISTTABLE SET CCNODECOUNT = ISNULL((SELECT TOP 1 ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = T.SERIALNUMBER
AND SM.SERVICEFAMILY IN ('SENTINELONE','SENTINELONEADVANCED','SENTINELONEPREMIER','CCMDR') ),0),
CASNODECOUNT = CASE WHEN T.PRODUCTID = 402 THEN ISNULL((SELECT ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = T.SERIALNUMBER
AND SM.SERVICEFAMILY ='CAS'),0)
ELSE 0 END,
HESNODECOUNT = CASE WHEN T.PRODUCTID = 300 THEN ISNULL((SELECT ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = T.SERIALNUMBER
AND SM.SERVICEFAMILY ='EMAILTHREAT'),0)
WHEN T.PRODUCTID = 404 THEN ISNULL((SELECT TOP 1 ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = T.SERIALNUMBER
AND SM.SERVICEFAMILY IN ('CESADVANCED','CESESSENTIAL')),0)
ELSE ISNULL(HESNODECOUNT,0) END,
GMSNODECOUNT = ISNULL((SELECT ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = T.SERIALNUMBER
AND SM.SERVICEFAMILY ='GMSMANAGEMENT'),0) ,
SASELICENSECOUNT = ISNULL((SELECT ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = T.SERIALNUMBER
AND SM.SERVICEFAMILY ='ZTNA'),0)
FROM #TEMPLISTTABLE T

UPDATE #TEMPLISTTABLE
SET PRODUCTGROUPID = PG.PRODUCTGROUPID ,
PRODUCTGROUPNAME = PG.PRODUCTGROUPNAME
FROM PRODUCTGROUP PG WITH ( NOLOCK ) ,
PRODUCTGROUPDETAIL PGD WITH ( NOLOCK ) ,
#TEMPLISTTABLE TMP
WHERE PG.PRODUCTGROUPID = PGD.PRODUCTGROUPID
AND PGD.SERIALNUMBER = TMP.SERIALNUMBER

--UPDATE #TEMPLISTTABLE
-- SET ROLETYPE = dbo.FNGETTENANTGROUPPERMISSION(@USERNAME,T.PRODUCTGROUPID,'ACCESSTYPEPRODMGMT','USER')
-- FROM #TEMPLISTTABLE T

--Adding ISNULL to check and return the roletype using FNGETTENANTGROUPPERMISSION function,incase TENANTGROUPPERMISSIONSUMMARY has NULL values for roletype columns.
UPDATE #TEMPLISTTABLE
SET ROLETYPE =
CASE
(SELECT TOP 1 ISSUPERADMIN FROM TENANTGROUPPERMISSIONSUMMARY WITH (NOLOCK) WHERE USERNAME=@USERNAME AND PRODUCTGROUPID=P.PRODUCTGROUPID
AND PARTYID IN (SELECT PARTYID FROM PARTY(NOLOCK) WHERE CONTACTID = @CONTACTID)) WHEN 'YES' THEN 'SUPERADMIN'
ELSE
ISNULL((SELECT TOP 1 ACCESSTYPEPRODMGMTROLETYPE
FROM TENANTGROUPPERMISSIONSUMMARY WITH (NOLOCK) WHERE USERNAME=@USERNAME AND PRODUCTGROUPID=P.PRODUCTGROUPID AND PARTYID IN (SELECT PARTYID FROM PARTY(NOLOCK) WHERE CONTACTID = @CONTACTID))
,dbo.FNGETTENANTGROUPPERMISSION(@USERNAME,P.PRODUCTGROUPID,@APPLICATIONFUNCTIONALITY,'USER', DEFAULT))
END
FROM #TEMPLISTTABLE P WITH (NOLOCK)

END
IF(@ROLETYPELOGIC='NO') OR EXISTS(SELECT T.PRODUCTGROUPID FROM #TEMPLISTTABLE T WITH (NOLOCK)
INNER JOIN TENANTACTIVITYSTAGING CP WITH (NOLOCK) ON T.PRODUCTGROUPID=CP.PRODUCTGROUPID AND PROCESSED='NO')
BEGIN
UPDATE #TEMPLISTTABLE
SET ROLETYPE = DBO.FNGETTENANTGROUPPERMISSION(@USERNAME,T.PRODUCTGROUPID,'ACCESSTYPEPRODMGMT','USER', DEFAULT)
FROM #TEMPLISTTABLE T
END

UPDATE #TEMPLISTTABLE
SET ORGNAME = IO.ORGANIZATIONNAME, ORGID=@ORGID,
ISSHAREDTENANT = CASE WHEN @ORGID <> PR.ORGANIZATIONID THEN 'YES' ELSE 'NO' END
FROM #TEMPLISTTABLE T , PARTY PR (NOLOCK), PRODUCTGROUP PG (NOLOCK), ORGANIZATION IO (NOLOCK)
WHERE PR.PARTYID = PG.ADMINPARTYID AND PG.PRODUCTGROUPID= T.PRODUCTGROUPID
AND IO.ORGANIZATIONID = PR.ORGANIZATIONID

-- IF EXISTS (SELECT * FROM APPLICATIONCONFIGVALUE (NOLOCK) WHERE APPLICATIONCONFIGNAME = 'ISRBACPERMISSIONNEEDED' AND APPLICATIONCONFIGVALUE = 'TRUE')
--BEGIN
DECLARE @APPLICATIONFUNCATIONALITYID INT=0
SELECT TOP 1 @APPLICATIONFUNCATIONALITYID= APPLICATIONFUNCATIONALITYID from applicationfunctionality nolock where internaldescription='ACCESSTYPEPRODMGMT'

--UPDATE T
--SET ROLETYPE = G.ACCESSTYPEPRODMGMTROLETYPE
--FROM #TEMPLISTTABLE T WITH (NOLOCK)
--inner join CUSTOMERPRODUCTSSUMMARY cp with (nolock)
--on cp.serialnumber=t.serialnumber
--INNER JOIN TENANTGROUPPERMISSIONSUMMARY G WITH (NOLOCK)
--ON t.PRODUCTGROUPID=G.PRODUCTGROUPID
--AND G.USERNAME=@USERNAME

UPDATE #TEMPLISTTABLE SET
HESNODECOUNT = CASE WHEN #TEMPLISTTABLE.PRODUCTID = 404 THEN ISNULL((SELECT TOP 1 ISNULL(NODECOUNT,0) FROM
SERVICESSUMMARY SM WITH ( NOLOCK )
WHERE SM.SERIALNUMBER = #TEMPLISTTABLE.SERIALNUMBER
AND SM.SERVICEFAMILY IN ('CESADVANCED','CESESSENTIAL')),0)
ELSE HESNODECOUNT END

DELETE FROM #TEMPLISTTABLE
WHERE PRODUCTGROUPID IN (
SELECT PRODUCTGROUPID FROM PARTYPRODUCTGROUP(NOLOCK)
WHERE PARTYGROUPID IN ( SELECT PARTYGROUPID FROM PARTYPRODUCTGROUPDETAIL(NOLOCK) WHERE PERMISSIONTYPEDETAILID IN
(SELECT PERMISSIONTYPEDETAILID FROM PERMISSIONTYPEDETAIL(NOLOCK) WHERE EXTERNALNAME = 'NOACCESS' AND
APPLICATIONFUNCATIONALITYID=@APPLICATIONFUNCATIONALITYID ))
AND PARTYGROUPID IN (SELECT PARTYGROUPID FROM PARTYGROUPDETAIL (NOLOCK) WHERE PARTYID IN (
SELECT PARTYID FROM PARTY(NOLOCK) WHERE CONTACTID =@CONTACTID)))
AND ROLETYPE <> 'SUPERADMIN'

--END

--300 Hosted Email Security
--310 Cloud Manager
--320 ON-PREM ANALYZER
--321 On-Prem Syslog Analytics
--400 Cloud GMS
--401 Capture Client
--402 CAS
--403 Cloud Edge
--300,400, 401,402,403

--IF EXISTS (SELECT * FROM APPLICATIONCONFIGVALUE (NOLOCK) WHERE APPLICATIONCONFIGNAME = 'ISRBACPERMISSIONNEEDED' AND APPLICATIONCONFIGVALUE = 'TRUE') AND
IF EXISTS (SELECT APPLICATIONPARTYROLEID FROM APPLICATIONPARTYROLE NOLOCK WHERE PARTYID=(SELECT TOP 1 PARTYID FROM VCUSTOMER(NOLOCK) WHERE USERNAME=@USERNAME) AND
APPLICATIONROLEID IN(SELECT APPLICATIONROLEID FROM APPLICATIONROLE NOLOCK WHERE ROLENAME='WORKSPACEBETA' AND APPLICATIONNAME='MSW')) OR
EXISTS(SELECT * FROM APPLICATIONCONFIGVALUE NOLOCK WHERE APPLICATIONCONFIGNAME='ISWORKSPACEENABLED' AND APPLICATIONCONFIGVALUE='FORCED')
BEGIN
UPDATE #TEMPLISTTABLE
SET ISRENAMEALLOWED = CASE WHEN PRODUCTID IN ( 401,402,403,408 ) THEN 'NO' ELSE 'YES' END , -- Rename is restricted for CC, CAS and SASE tenants
ISTRANSFERALLOWED =CASE WHEN PRODUCTID IN ( 400 ) THEN 'NO' WHEN ACTIVEPROMOTION =1 AND @ROLLUP = 0 THEN 'NO'
WHEN PRODUCTLINE='STORAGE MODULE' OR PRODUCTLINE='SATA MODULE' OR PRODUCTLINE='M2 STORAGE MODULE' THEN 'NO' WHEN S1SVCSTATUS = 'PENDING' THEN 'NO' ELSE 'YES' END,
ISDELETEALLOWED =CASE WHEN PRODUCTID IN ( 400 ) THEN 'NO' WHEN ACTIVEPROMOTION =1 THEN 'NO'
WHEN PRODUCTLINE='STORAGE MODULE' OR PRODUCTLINE='SATA MODULE' OR PRODUCTLINE='M2 STORAGE MODULE' THEN 'NO' WHEN S1SVCSTATUS = 'PENDING' THEN 'NO' ELSE 'YES' END,
ISSECUREUPGRADE = CASE WHEN ACTIVEPROMOTION =1 THEN 'YES' ELSE 'NO' END

UPDATE #TEMPLISTTABLE
SET ISRENAMEALLOWED = CASE WHEN UPPER(ROLETYPE) IN ('READONLY') THEN 'NO' ELSE ISRENAMEALLOWED END,
ISDELETEALLOWED = CASE WHEN UPPER(ROLETYPE) IN ('READONLY','OPERATOR') THEN 'NO' ELSE ISDELETEALLOWED END,
ISTRANSFERALLOWED = CASE WHEN UPPER(ROLETYPE) IN ('READONLY','OPERATOR') THEN 'NO' ELSE ISTRANSFERALLOWED END,
ISZEROTOUCHALLOWED = CASE WHEN UPPER(ROLETYPE) IN ('READONLY') THEN 'NO' END
FROM #TEMPLISTTABLE TMP
END
ELSE
BEGIN
UPDATE #TEMPLISTTABLE
SET ISRENAMEALLOWED = CASE WHEN PRODUCTID IN ( 401,402,403,408 ) THEN 'NO' ELSE 'YES' END , -- Rename is restricted for CC, CAS and SASE tenants
ISTRANSFERALLOWED =CASE WHEN OWNEROFTHEPRODUCT!=1 THEN 'NO' WHEN PRODUCTID IN ( 401 ) THEN 'NO' WHEN ACTIVEPROMOTION =1 AND @ROLLUP = 0 THEN 'NO'
WHEN PRODUCTLINE='STORAGE MODULE' OR PRODUCTLINE='SATA MODULE' OR PRODUCTLINE='M2 STORAGE MODULE' THEN 'NO' WHEN S1SVCSTATUS = 'PENDING' THEN 'NO' ELSE 'YES' END,
ISDELETEALLOWED =CASE WHEN OWNEROFTHEPRODUCT!=1 THEN 'NO' WHEN ACTIVEPROMOTION =1 THEN 'NO'
WHEN PRODUCTLINE='STORAGE MODULE' OR PRODUCTLINE='SATA MODULE' OR PRODUCTLINE='M2 STORAGE MODULE' THEN 'NO' WHEN S1SVCSTATUS = 'PENDING' THEN 'NO' ELSE 'YES' END,
ISSECUREUPGRADE = CASE WHEN ACTIVEPROMOTION =1 THEN 'YES' ELSE 'NO' END ,
ISZEROTOUCHALLOWED = CASE WHEN UPPER(ROLETYPE) IN ('READONLY') THEN 'NO' END
END

IF ISNULL(@ISMSSPUSER, '') <> ''
UPDATE #TEMPLISTTABLE
SET MSSPMONTHLYOPTION = CASE WHEN #TEMPLISTTABLE.PRODUCTID IN (SELECT MS.PRODUCTID
FROM MASTERMSSPPRODUCTSERVICES MS WITH (NOLOCK), CUSTOMERPRODUCTS CP WITH (NOLOCK) WHERE
CP.SERIALNUMBER = #TEMPLISTTABLE.SERIALNUMBER AND MS.STATUS='ACTIVE' AND CP.MSSPMONTHLY = 'YES')
THEN 'DISABLE' -- MSSP Monthly is enabled, hence show disable option

WHEN #TEMPLISTTABLE.PRODUCTID IN (SELECT MS.PRODUCTID
FROM MASTERMSSPPRODUCTSERVICES MS WITH (NOLOCK), CUSTOMERPRODUCTS CP WITH (NOLOCK) WHERE
CP.SERIALNUMBER = #TEMPLISTTABLE.SERIALNUMBER AND MS.STATUS='ACTIVE' AND ISNULL(CP.MSSPMONTHLY,'NO') = 'NO')
THEN 'ENABLE' END -- MSSP Monthly is disabled, hence show enable option

-- UPDATE #TEMPLISTABLE
--SET MSSPMONTHLYOPTION = CASE WHEN ISNULL(PG.MASTERMSSPID,0)=0 THEN ''
--WHEN ISNULL(PG.MASTERMSSPID,0)>0 AND PG.ISMAPPEDMSSPID=1 THEN '' ELSE MSSPMONTHLYOPTION END
--FROM #TEMPLISTABLE T, DBO.FNNONMSSPTENANTSLIST(@USERNAME) PG
--WHERE T.PRODUCTGROUPID=PG.PRODUCTGROUPID

--In case primary product is NSM then enable isAddKeySetApplicable
IF EXISTS (select producttype from genericproducts WITH (NOLOCK) where producttype='NSM ON-PREM' and PRODUCTID IN (SELECT PRODUCTID FROM PRODUCTSERIALNUMBERS WITH (NOLOCK) WHERE SERIALNUMBER=@SERIALNUMBER) )
BEGIN
UPDATE #TEMPLISTTABLE SET ISADDKEYSETAPPLICABLE = 'YES'
END

UPDATE #TEMPLISTTABLE
SET PSAADDITIONSEXPIRYDATE= (SELECT MAX(SM.EXPIRATIONDATE ) FROM SERVICESSUMMARY SM (NOLOCK)
WHERE #TEMPLISTTABLE.SERIALNUMBER=SM.SERIALNUMBER AND SM.EXPIRATIONDATE IS NOT NULL)
FROM #TEMPLISTTABLE, SERVICESSUMMARY SM (NOLOCK)

UPDATE #TEMPLISTTABLE
SET ISBILLABLE=CASE WHEN DATEDIFF(DD, GETDATE(), #TEMPLISTTABLE.PSAADDITIONSEXPIRYDATE) <0 THEN 'NO' ELSE #TEMPLISTTABLE.ISBILLABLE END
FROM #TEMPLISTTABLE, CUSTOMERPRODUCTSSUMMARY C (NOLOCK)
WHERE #TEMPLISTTABLE.SERIALNUMBER=C.SERIALNUMBER AND ISNULL(C.PRODUCTTYPE,'') !='FIREWALL'

UPDATE #TEMPLISTTABLE
SET ISDELETEALLOWED = 'NO' WHERE SERIALNUMBER IN(SELECT CHILDSERIALNUMBER FROM DEVICEASSOCIATION (NOLOCK) WHERE
PRODUCTASSOCIATIONTYPEID=(SELECT PRODUCTASSOCIATIONTYPEID FROM PRODUCTASSOCIATIONTYPE WITH (NOLOCK)
WHERE INTERNALDESCRIPTION='VL_ASSOCIATION') AND CHILDSERIALNUMBER IN
(SELECT SERIALNUMBER FROM #TEMPLISTTABLE))

UPDATE #TEMPLISTTABLE
SET ISDELETEALLOWED = 'NO',ISZEROTOUCHALLOWED='NO' WHERE SERIALNUMBER IN (SELECT SERIALNUMBER FROM PUBLICCLOUDINSTANCESREGISTER (NOLOCK) WHERE PUBLICCLOUDNAME='VOLUMELICENSING')

UPDATE #TEMPLISTTABLE
SET ISDELETEALLOWED = 'NO'
WHERE SERIALNUMBER IN (SELECT SERIALNUMBER FROM MSSPPRODUCTSERVICESSUMMARY with(NOLOCK)
WHERE STATUS='ACTIVE')

IF EXISTS(SELECT 1 FROM DEVICEASSOCIATION DA with (nolock),#TEMPLISTTABLE T WHERE CHILDSERIALNUMBER=T.SERIALNUMBER
AND PRODUCTASSOCIATIONTYPEID IN (SELECT PRODUCTASSOCIATIONTYPEID
FROM DBO.PRODUCTASSOCIATIONTYPE WITH ( NOLOCK ) WHERE INTERNALDESCRIPTION ='HA_ASSOCIATION' ))
BEGIN
UPDATE T
SET ISDELETEALLOWED = 'NO'
FROM DEVICEASSOCIATION DA with (nolock),#TEMPLISTTABLE T WHERE CHILDSERIALNUMBER=T.SERIALNUMBER
AND PRODUCTASSOCIATIONTYPEID IN (SELECT PRODUCTASSOCIATIONTYPEID FROM DBO.PRODUCTASSOCIATIONTYPE WITH (NOLOCK)
WHERE INTERNALDESCRIPTION ='HA_ASSOCIATION' )
AND SERIALNUMBER IN (SELECT HASECONDARY FROM MSSPPRODUCTSERVICESSUMMARY with(NOLOCK)
WHERE STATUS='ACTIVE')
END

UPDATE #TEMPLISTTABLE SET
EMAILADDRESS = VC.EMAILADDRESS,
DESCRIPTION=CP.FRIENDLYNAME
--MANAGEMENTOPTION=CP.MANAGEMENTOPTION
FROM vCUSTOMER VC, #TEMPLISTTABLE T,
CUSTOMERPRODUCTS CP WITH (NOLOCK) WHERE
CP.SERIALNUMBER = T.SERIALNUMBER AND
CP.USERNAME=VC.USERNAME AND ISNULL(VC.ISORGADMIN,0)=0

--ONBOX-AMAL
UPDATE #TEMPLISTTABLE SET
MANAGEMENTOPTION=CP.MANAGEMENTOPTION
FROM #TEMPLISTTABLE T,
CUSTOMERPRODUCTS CP WITH (NOLOCK) WHERE
CP.SERIALNUMBER = T.SERIALNUMBER

UPDATE #TEMPLISTTABLE SET
EMAILADDRESS = VC.EMAILADDRESS,
DESCRIPTION=CP.FRIENDLYNAME
FROM vCUSTOMER VC, #TEMPLISTTABLE T,
CUSTOMERPRODUCTS CP WITH (NOLOCK) WHERE
CP.SERIALNUMBER = T.SERIALNUMBER AND
CP.REGISTEREDUSERNAME=VC.USERNAME AND ISNULL(VC.ISORGADMIN,0)=0

UPDATE T SET PRODUCTLINE= GP.PRODUCTTYPE
FROM #TEMPLISTTABLE T
,GENERICPRODUCTS GP WITH (NOLOCK)
,PRODUCTS P WITH (NOLOCK)
WHERE T.PRODUCTID=GP.PRODUCTID AND P.PRODUCTID=GP.PRODUCTID
AND P.PRODUCTLINE='NSM ON-PREM'

-- This stored procedure would continue with additional logic but the original was truncated in the user's message
-- The key comparison section we need is the product population logic above

END